/*
 * generated by Xtext 2.25.0
 */
package com.mert.recherche.serializer;

import com.google.inject.Inject;
import com.mert.recherche.mkDsl.ACTION;
import com.mert.recherche.mkDsl.COLOR;
import com.mert.recherche.mkDsl.CONDITION;
import com.mert.recherche.mkDsl.CONNECTIVE;
import com.mert.recherche.mkDsl.DT;
import com.mert.recherche.mkDsl.EDGE;
import com.mert.recherche.mkDsl.ESG;
import com.mert.recherche.mkDsl.EXPRESSION;
import com.mert.recherche.mkDsl.Event;
import com.mert.recherche.mkDsl.MkDslPackage;
import com.mert.recherche.mkDsl.Model;
import com.mert.recherche.mkDsl.OPERAND;
import com.mert.recherche.mkDsl.RULE;
import com.mert.recherche.mkDsl.VARIABLE;
import com.mert.recherche.mkDsl.VERTEX;
import com.mert.recherche.services.MkDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MkDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MkDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MkDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MkDslPackage.ACTION:
				sequence_ACTION(context, (ACTION) semanticObject); 
				return; 
			case MkDslPackage.COLOR:
				sequence_COLOR(context, (COLOR) semanticObject); 
				return; 
			case MkDslPackage.CONDITION:
				sequence_CONDITION(context, (CONDITION) semanticObject); 
				return; 
			case MkDslPackage.CONNECTIVE:
				sequence_CONNECTIVE(context, (CONNECTIVE) semanticObject); 
				return; 
			case MkDslPackage.DT:
				sequence_DT(context, (DT) semanticObject); 
				return; 
			case MkDslPackage.EDGE:
				sequence_EDGE(context, (EDGE) semanticObject); 
				return; 
			case MkDslPackage.ESG:
				sequence_ESG(context, (ESG) semanticObject); 
				return; 
			case MkDslPackage.EXPRESSION:
				sequence_EXPRESSION(context, (EXPRESSION) semanticObject); 
				return; 
			case MkDslPackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case MkDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MkDslPackage.OPERAND:
				sequence_OPERAND(context, (OPERAND) semanticObject); 
				return; 
			case MkDslPackage.RULE:
				sequence_RULE(context, (RULE) semanticObject); 
				return; 
			case MkDslPackage.VARIABLE:
				sequence_VARIABLE(context, (VARIABLE) semanticObject); 
				return; 
			case MkDslPackage.VERTEX:
				sequence_VERTEX(context, (VERTEX) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ACTION returns ACTION
	 *
	 * Constraint:
	 *     (name=ID ID=STRING event=INT)
	 */
	protected void sequence_ACTION(ISerializationContext context, ACTION semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MkDslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MkDslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, MkDslPackage.Literals.ACTION__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MkDslPackage.Literals.ACTION__ID));
			if (transientValues.isValueTransient(semanticObject, MkDslPackage.Literals.ACTION__EVENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MkDslPackage.Literals.ACTION__EVENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getACTIONAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getACTIONAccess().getIDSTRINGTerminalRuleCall_3_0(), semanticObject.getID());
		feeder.accept(grammarAccess.getACTIONAccess().getEventINTTerminalRuleCall_5_0(), semanticObject.getEvent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     COLOR returns COLOR
	 *
	 * Constraint:
	 *     (name='black' | name='red' | name='green' | name='blue' | name='orange')
	 */
	protected void sequence_COLOR(ISerializationContext context, COLOR semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CONDITION returns CONDITION
	 *
	 * Constraint:
	 *     (name=INT evals+=EVALUABLE evals+=EVALUABLE*)
	 */
	protected void sequence_CONDITION(ISerializationContext context, CONDITION semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EVALUABLE returns CONNECTIVE
	 *     CONNECTIVE returns CONNECTIVE
	 *
	 * Constraint:
	 *     (connective='AND' | connective='OR')
	 */
	protected void sequence_CONNECTIVE(ISerializationContext context, CONNECTIVE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DT returns DT
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         ID=INT 
	 *         conditions+=CONDITION 
	 *         conditions+=CONDITION* 
	 *         actions+=ACTION 
	 *         actions+=ACTION* 
	 *         rules+=RULE 
	 *         rules+=RULE*
	 *     )
	 */
	protected void sequence_DT(ISerializationContext context, DT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EDGE returns EDGE
	 *
	 * Constraint:
	 *     (name=STRING source=INT target=INT color=COLOR?)
	 */
	protected void sequence_EDGE(ISerializationContext context, EDGE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Declaration returns ESG
	 *     ESG returns ESG
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         event=Event? 
	 *         (subESGs+=VERTEX | subESGs+=ESG) 
	 *         subESGs+=ESG? 
	 *         (subESGs+=VERTEX? subESGs+=ESG?)* 
	 *         edges+=EDGE 
	 *         edges+=EDGE*
	 *     )
	 */
	protected void sequence_ESG(ISerializationContext context, ESG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EVALUABLE returns EXPRESSION
	 *     EXPRESSION returns EXPRESSION
	 *
	 * Constraint:
	 *     (left=LITERAL operand=OPERAND? right=LITERAL?)
	 */
	protected void sequence_EXPRESSION(ISerializationContext context, EXPRESSION semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Event returns Event
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MkDslPackage.Literals.EVENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MkDslPackage.Literals.EVENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEventAccess().getNameSTRINGTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     declarations+=Declaration+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OPERAND returns OPERAND
	 *
	 * Constraint:
	 *     (operand='<' | operand='<=' | operand='==' | operand='>=' | operand='>')
	 */
	protected void sequence_OPERAND(ISerializationContext context, OPERAND semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RULE returns RULE
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         ID=INT 
	 *         value=STRING 
	 *         vars+=VARIABLE 
	 *         vars+=VARIABLE* 
	 *         actions+=[ACTION|ID] 
	 *         actions+=[ACTION|ID]*
	 *     )
	 */
	protected void sequence_RULE(ISerializationContext context, RULE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VARIABLE returns VARIABLE
	 *
	 * Constraint:
	 *     (name=STRING value=LITERAL)
	 */
	protected void sequence_VARIABLE(ISerializationContext context, VARIABLE semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MkDslPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MkDslPackage.Literals.VARIABLE__NAME));
			if (transientValues.isValueTransient(semanticObject, MkDslPackage.Literals.VARIABLE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MkDslPackage.Literals.VARIABLE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVARIABLEAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getVARIABLEAccess().getValueLITERALParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VERTEX returns VERTEX
	 *
	 * Constraint:
	 *     (ID=STRING event=Event color=COLOR? dt=DT?)
	 */
	protected void sequence_VERTEX(ISerializationContext context, VERTEX semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
