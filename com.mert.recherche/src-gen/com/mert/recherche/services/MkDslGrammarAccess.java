/*
 * generated by Xtext 2.25.0
 */
package com.mert.recherche.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MkDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mert.recherche.MkDsl.Model");
		private final Assignment cDeclarationsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_0 = (RuleCall)cDeclarationsAssignment.eContents().get(0);
		
		//Model:
		//    declarations+=Declaration*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment() { return cDeclarationsAssignment; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_0() { return cDeclarationsDeclarationParserRuleCall_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mert.recherche.MkDsl.Declaration");
		private final RuleCall cESGParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Declaration:
		//    ESG
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ESG
		public RuleCall getESGParserRuleCall() { return cESGParserRuleCall; }
	}
	public class ESGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mert.recherche.MkDsl.ESG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cESGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEventKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEventAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEventEventParserRuleCall_2_1_0 = (RuleCall)cEventAssignment_2_1.eContents().get(0);
		private final Assignment cSubESGsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cSubESGsAlternatives_3_0 = (Alternatives)cSubESGsAssignment_3.eContents().get(0);
		private final RuleCall cSubESGsVERTEXParserRuleCall_3_0_0 = (RuleCall)cSubESGsAlternatives_3_0.eContents().get(0);
		private final RuleCall cSubESGsESGParserRuleCall_3_0_1 = (RuleCall)cSubESGsAlternatives_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSubESGsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Alternatives cSubESGsAlternatives_4_1_0 = (Alternatives)cSubESGsAssignment_4_1.eContents().get(0);
		private final RuleCall cSubESGsVERTEXParserRuleCall_4_1_0_0 = (RuleCall)cSubESGsAlternatives_4_1_0.eContents().get(0);
		private final RuleCall cSubESGsESGParserRuleCall_4_1_0_1 = (RuleCall)cSubESGsAlternatives_4_1_0.eContents().get(1);
		private final Assignment cEdgesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEdgesEDGEParserRuleCall_5_0 = (RuleCall)cEdgesAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cEdgesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cEdgesEDGEParserRuleCall_6_1_0 = (RuleCall)cEdgesAssignment_6_1.eContents().get(0);
		
		//ESG: 'ESG' name = STRING
		//    ('Event' event = Event)?
		//    subESGs += (VERTEX | ESG) (',' subESGs += (VERTEX | ESG))*
		//    edges += EDGE(',' edges += EDGE)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'ESG' name = STRING
		//   ('Event' event = Event)?
		//   subESGs += (VERTEX | ESG) (',' subESGs += (VERTEX | ESG))*
		//   edges += EDGE(',' edges += EDGE)*
		public Group getGroup() { return cGroup; }
		
		//'ESG'
		public Keyword getESGKeyword_0() { return cESGKeyword_0; }
		
		//name = STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//('Event' event = Event)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Event'
		public Keyword getEventKeyword_2_0() { return cEventKeyword_2_0; }
		
		//event = Event
		public Assignment getEventAssignment_2_1() { return cEventAssignment_2_1; }
		
		//Event
		public RuleCall getEventEventParserRuleCall_2_1_0() { return cEventEventParserRuleCall_2_1_0; }
		
		//subESGs += (VERTEX | ESG)
		public Assignment getSubESGsAssignment_3() { return cSubESGsAssignment_3; }
		
		//(VERTEX | ESG)
		public Alternatives getSubESGsAlternatives_3_0() { return cSubESGsAlternatives_3_0; }
		
		//VERTEX
		public RuleCall getSubESGsVERTEXParserRuleCall_3_0_0() { return cSubESGsVERTEXParserRuleCall_3_0_0; }
		
		//ESG
		public RuleCall getSubESGsESGParserRuleCall_3_0_1() { return cSubESGsESGParserRuleCall_3_0_1; }
		
		//(',' subESGs += (VERTEX | ESG))*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//subESGs += (VERTEX | ESG)
		public Assignment getSubESGsAssignment_4_1() { return cSubESGsAssignment_4_1; }
		
		//(VERTEX | ESG)
		public Alternatives getSubESGsAlternatives_4_1_0() { return cSubESGsAlternatives_4_1_0; }
		
		//VERTEX
		public RuleCall getSubESGsVERTEXParserRuleCall_4_1_0_0() { return cSubESGsVERTEXParserRuleCall_4_1_0_0; }
		
		//ESG
		public RuleCall getSubESGsESGParserRuleCall_4_1_0_1() { return cSubESGsESGParserRuleCall_4_1_0_1; }
		
		//edges += EDGE
		public Assignment getEdgesAssignment_5() { return cEdgesAssignment_5; }
		
		//EDGE
		public RuleCall getEdgesEDGEParserRuleCall_5_0() { return cEdgesEDGEParserRuleCall_5_0; }
		
		//(',' edges += EDGE)*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//edges += EDGE
		public Assignment getEdgesAssignment_6_1() { return cEdgesAssignment_6_1; }
		
		//EDGE
		public RuleCall getEdgesEDGEParserRuleCall_6_1_0() { return cEdgesEDGEParserRuleCall_6_1_0; }
	}
	public class VERTEXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mert.recherche.MkDsl.VERTEX");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVertexKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIDKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIDAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIDSTRINGTerminalRuleCall_2_0 = (RuleCall)cIDAssignment_2.eContents().get(0);
		private final Keyword cEventKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEventAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEventEventParserRuleCall_4_0 = (RuleCall)cEventAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColorKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cColorAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cColorCOLORParserRuleCall_5_1_0 = (RuleCall)cColorAssignment_5_1.eContents().get(0);
		private final Assignment cDtAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDtDTParserRuleCall_6_0 = (RuleCall)cDtAssignment_6.eContents().get(0);
		
		//VERTEX: 'Vertex'
		//    'ID' ID = STRING
		//    'Event' event = Event
		//    ('Color' color= COLOR)?
		//    (dt = DT)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Vertex'
		//   'ID' ID = STRING
		//   'Event' event = Event
		//   ('Color' color= COLOR)?
		//   (dt = DT)?
		public Group getGroup() { return cGroup; }
		
		//'Vertex'
		public Keyword getVertexKeyword_0() { return cVertexKeyword_0; }
		
		//'ID'
		public Keyword getIDKeyword_1() { return cIDKeyword_1; }
		
		//ID = STRING
		public Assignment getIDAssignment_2() { return cIDAssignment_2; }
		
		//STRING
		public RuleCall getIDSTRINGTerminalRuleCall_2_0() { return cIDSTRINGTerminalRuleCall_2_0; }
		
		//'Event'
		public Keyword getEventKeyword_3() { return cEventKeyword_3; }
		
		//event = Event
		public Assignment getEventAssignment_4() { return cEventAssignment_4; }
		
		//Event
		public RuleCall getEventEventParserRuleCall_4_0() { return cEventEventParserRuleCall_4_0; }
		
		//('Color' color= COLOR)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'Color'
		public Keyword getColorKeyword_5_0() { return cColorKeyword_5_0; }
		
		//color= COLOR
		public Assignment getColorAssignment_5_1() { return cColorAssignment_5_1; }
		
		//COLOR
		public RuleCall getColorCOLORParserRuleCall_5_1_0() { return cColorCOLORParserRuleCall_5_1_0; }
		
		//(dt = DT)?
		public Assignment getDtAssignment_6() { return cDtAssignment_6; }
		
		//DT
		public RuleCall getDtDTParserRuleCall_6_0() { return cDtDTParserRuleCall_6_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mert.recherche.MkDsl.Event");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Event:
		//    name = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = STRING
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}
	public class EDGEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mert.recherche.MkDsl.EDGE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEdgeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSourceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSourceINTTerminalRuleCall_3_0 = (RuleCall)cSourceAssignment_3.eContents().get(0);
		private final Keyword cTargetKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTargetAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTargetINTTerminalRuleCall_5_0 = (RuleCall)cTargetAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cColorKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cColorAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cColorCOLORParserRuleCall_6_1_0 = (RuleCall)cColorAssignment_6_1.eContents().get(0);
		
		//EDGE: 'Edge' name = STRING
		//    'Source' source= INT
		//    'Target' target= INT
		//    ('Color' color= COLOR)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Edge' name = STRING
		//   'Source' source= INT
		//   'Target' target= INT
		//   ('Color' color= COLOR)?
		public Group getGroup() { return cGroup; }
		
		//'Edge'
		public Keyword getEdgeKeyword_0() { return cEdgeKeyword_0; }
		
		//name = STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'Source'
		public Keyword getSourceKeyword_2() { return cSourceKeyword_2; }
		
		//source= INT
		public Assignment getSourceAssignment_3() { return cSourceAssignment_3; }
		
		//INT
		public RuleCall getSourceINTTerminalRuleCall_3_0() { return cSourceINTTerminalRuleCall_3_0; }
		
		//'Target'
		public Keyword getTargetKeyword_4() { return cTargetKeyword_4; }
		
		//target= INT
		public Assignment getTargetAssignment_5() { return cTargetAssignment_5; }
		
		//INT
		public RuleCall getTargetINTTerminalRuleCall_5_0() { return cTargetINTTerminalRuleCall_5_0; }
		
		//('Color' color= COLOR)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'Color'
		public Keyword getColorKeyword_6_0() { return cColorKeyword_6_0; }
		
		//color= COLOR
		public Assignment getColorAssignment_6_1() { return cColorAssignment_6_1; }
		
		//COLOR
		public RuleCall getColorCOLORParserRuleCall_6_1_0() { return cColorCOLORParserRuleCall_6_1_0; }
	}
	public class DTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mert.recherche.MkDsl.DT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIDAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIDINTTerminalRuleCall_3_0 = (RuleCall)cIDAssignment_3.eContents().get(0);
		private final Assignment cConditionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionsCONDITIONParserRuleCall_4_0 = (RuleCall)cConditionsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConditionsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConditionsCONDITIONParserRuleCall_5_1_0 = (RuleCall)cConditionsAssignment_5_1.eContents().get(0);
		private final Assignment cActionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cActionsACTIONParserRuleCall_6_0 = (RuleCall)cActionsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cActionsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cActionsACTIONParserRuleCall_7_1_0 = (RuleCall)cActionsAssignment_7_1.eContents().get(0);
		private final Assignment cRulesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cRulesRULEParserRuleCall_8_0 = (RuleCall)cRulesAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cRulesAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cRulesRULEParserRuleCall_9_1_0 = (RuleCall)cRulesAssignment_9_1.eContents().get(0);
		
		//DT: "DT" name = STRING
		//    "ID" ID = INT
		//    conditions += CONDITION (',' conditions += CONDITION)*
		//    actions += ACTION (',' actions += ACTION)*
		//    rules += RULE (',' rules += RULE)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"DT" name = STRING
		//   "ID" ID = INT
		//   conditions += CONDITION (',' conditions += CONDITION)*
		//   actions += ACTION (',' actions += ACTION)*
		//   rules += RULE (',' rules += RULE)*
		public Group getGroup() { return cGroup; }
		
		//"DT"
		public Keyword getDTKeyword_0() { return cDTKeyword_0; }
		
		//name = STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//"ID"
		public Keyword getIDKeyword_2() { return cIDKeyword_2; }
		
		//ID = INT
		public Assignment getIDAssignment_3() { return cIDAssignment_3; }
		
		//INT
		public RuleCall getIDINTTerminalRuleCall_3_0() { return cIDINTTerminalRuleCall_3_0; }
		
		//conditions += CONDITION
		public Assignment getConditionsAssignment_4() { return cConditionsAssignment_4; }
		
		//CONDITION
		public RuleCall getConditionsCONDITIONParserRuleCall_4_0() { return cConditionsCONDITIONParserRuleCall_4_0; }
		
		//(',' conditions += CONDITION)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//conditions += CONDITION
		public Assignment getConditionsAssignment_5_1() { return cConditionsAssignment_5_1; }
		
		//CONDITION
		public RuleCall getConditionsCONDITIONParserRuleCall_5_1_0() { return cConditionsCONDITIONParserRuleCall_5_1_0; }
		
		//actions += ACTION
		public Assignment getActionsAssignment_6() { return cActionsAssignment_6; }
		
		//ACTION
		public RuleCall getActionsACTIONParserRuleCall_6_0() { return cActionsACTIONParserRuleCall_6_0; }
		
		//(',' actions += ACTION)*
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//actions += ACTION
		public Assignment getActionsAssignment_7_1() { return cActionsAssignment_7_1; }
		
		//ACTION
		public RuleCall getActionsACTIONParserRuleCall_7_1_0() { return cActionsACTIONParserRuleCall_7_1_0; }
		
		//rules += RULE
		public Assignment getRulesAssignment_8() { return cRulesAssignment_8; }
		
		//RULE
		public RuleCall getRulesRULEParserRuleCall_8_0() { return cRulesRULEParserRuleCall_8_0; }
		
		//(',' rules += RULE)*
		public Group getGroup_9() { return cGroup_9; }
		
		//','
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }
		
		//rules += RULE
		public Assignment getRulesAssignment_9_1() { return cRulesAssignment_9_1; }
		
		//RULE
		public RuleCall getRulesRULEParserRuleCall_9_1_0() { return cRulesRULEParserRuleCall_9_1_0; }
	}
	public class CONDITIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mert.recherche.MkDsl.CONDITION");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameINTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cEvalsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEvalsEVALUABLEParserRuleCall_2_0 = (RuleCall)cEvalsAssignment_2.eContents().get(0);
		private final Assignment cEvalsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEvalsEVALUABLEParserRuleCall_3_0 = (RuleCall)cEvalsAssignment_3.eContents().get(0);
		
		//CONDITION: "Condition" name = INT
		//    evals += EVALUABLE(evals += EVALUABLE)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"Condition" name = INT
		//   evals += EVALUABLE(evals += EVALUABLE)*
		public Group getGroup() { return cGroup; }
		
		//"Condition"
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }
		
		//name = INT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//INT
		public RuleCall getNameINTTerminalRuleCall_1_0() { return cNameINTTerminalRuleCall_1_0; }
		
		//evals += EVALUABLE
		public Assignment getEvalsAssignment_2() { return cEvalsAssignment_2; }
		
		//EVALUABLE
		public RuleCall getEvalsEVALUABLEParserRuleCall_2_0() { return cEvalsEVALUABLEParserRuleCall_2_0; }
		
		//(evals += EVALUABLE)*
		public Assignment getEvalsAssignment_3() { return cEvalsAssignment_3; }
		
		//EVALUABLE
		public RuleCall getEvalsEVALUABLEParserRuleCall_3_0() { return cEvalsEVALUABLEParserRuleCall_3_0; }
	}
	public class RULEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mert.recherche.MkDsl.RULE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIDAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIDINTTerminalRuleCall_3_0 = (RuleCall)cIDAssignment_3.eContents().get(0);
		private final Keyword cValueKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueSTRINGTerminalRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cVariablesKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cVarsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cVarsVARIABLEParserRuleCall_7_0 = (RuleCall)cVarsAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cVarsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cVarsVARIABLEParserRuleCall_8_1_0 = (RuleCall)cVarsAssignment_8_1.eContents().get(0);
		private final Keyword cActionsKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cActionsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cActionsACTIONCrossReference_10_0 = (CrossReference)cActionsAssignment_10.eContents().get(0);
		private final RuleCall cActionsACTIONIDTerminalRuleCall_10_0_1 = (RuleCall)cActionsACTIONCrossReference_10_0.eContents().get(1);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cCommaKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cActionsAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final CrossReference cActionsACTIONCrossReference_11_1_0 = (CrossReference)cActionsAssignment_11_1.eContents().get(0);
		private final RuleCall cActionsACTIONIDTerminalRuleCall_11_1_0_1 = (RuleCall)cActionsACTIONCrossReference_11_1_0.eContents().get(1);
		
		//RULE: "Rule" name = STRING
		//    "ID" ID = INT
		//    "value" value = STRING
		//    "variables" vars += VARIABLE("," vars += VARIABLE)*
		//    "actions" actions += [ACTION]("," actions += [ACTION])*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"Rule" name = STRING
		//   "ID" ID = INT
		//   "value" value = STRING
		//   "variables" vars += VARIABLE("," vars += VARIABLE)*
		//   "actions" actions += [ACTION]("," actions += [ACTION])*
		public Group getGroup() { return cGroup; }
		
		//"Rule"
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//name = STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//"ID"
		public Keyword getIDKeyword_2() { return cIDKeyword_2; }
		
		//ID = INT
		public Assignment getIDAssignment_3() { return cIDAssignment_3; }
		
		//INT
		public RuleCall getIDINTTerminalRuleCall_3_0() { return cIDINTTerminalRuleCall_3_0; }
		
		//"value"
		public Keyword getValueKeyword_4() { return cValueKeyword_4; }
		
		//value = STRING
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_5_0() { return cValueSTRINGTerminalRuleCall_5_0; }
		
		//"variables"
		public Keyword getVariablesKeyword_6() { return cVariablesKeyword_6; }
		
		//vars += VARIABLE
		public Assignment getVarsAssignment_7() { return cVarsAssignment_7; }
		
		//VARIABLE
		public RuleCall getVarsVARIABLEParserRuleCall_7_0() { return cVarsVARIABLEParserRuleCall_7_0; }
		
		//("," vars += VARIABLE)*
		public Group getGroup_8() { return cGroup_8; }
		
		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }
		
		//vars += VARIABLE
		public Assignment getVarsAssignment_8_1() { return cVarsAssignment_8_1; }
		
		//VARIABLE
		public RuleCall getVarsVARIABLEParserRuleCall_8_1_0() { return cVarsVARIABLEParserRuleCall_8_1_0; }
		
		//"actions"
		public Keyword getActionsKeyword_9() { return cActionsKeyword_9; }
		
		//actions += [ACTION]
		public Assignment getActionsAssignment_10() { return cActionsAssignment_10; }
		
		//[ACTION]
		public CrossReference getActionsACTIONCrossReference_10_0() { return cActionsACTIONCrossReference_10_0; }
		
		//ID
		public RuleCall getActionsACTIONIDTerminalRuleCall_10_0_1() { return cActionsACTIONIDTerminalRuleCall_10_0_1; }
		
		//("," actions += [ACTION])*
		public Group getGroup_11() { return cGroup_11; }
		
		//","
		public Keyword getCommaKeyword_11_0() { return cCommaKeyword_11_0; }
		
		//actions += [ACTION]
		public Assignment getActionsAssignment_11_1() { return cActionsAssignment_11_1; }
		
		//[ACTION]
		public CrossReference getActionsACTIONCrossReference_11_1_0() { return cActionsACTIONCrossReference_11_1_0; }
		
		//ID
		public RuleCall getActionsACTIONIDTerminalRuleCall_11_1_0_1() { return cActionsACTIONIDTerminalRuleCall_11_1_0_1; }
	}
	public class ACTIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mert.recherche.MkDsl.ACTION");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIDAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIDSTRINGTerminalRuleCall_3_0 = (RuleCall)cIDAssignment_3.eContents().get(0);
		private final Keyword cEventKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEventAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEventINTTerminalRuleCall_5_0 = (RuleCall)cEventAssignment_5.eContents().get(0);
		
		//ACTION: "Action" name = ID
		//    "ID" ID = STRING
		//    "event" event = INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"Action" name = ID
		//   "ID" ID = STRING
		//   "event" event = INT
		public Group getGroup() { return cGroup; }
		
		//"Action"
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"ID"
		public Keyword getIDKeyword_2() { return cIDKeyword_2; }
		
		//ID = STRING
		public Assignment getIDAssignment_3() { return cIDAssignment_3; }
		
		//STRING
		public RuleCall getIDSTRINGTerminalRuleCall_3_0() { return cIDSTRINGTerminalRuleCall_3_0; }
		
		//"event"
		public Keyword getEventKeyword_4() { return cEventKeyword_4; }
		
		//event = INT
		public Assignment getEventAssignment_5() { return cEventAssignment_5; }
		
		//INT
		public RuleCall getEventINTTerminalRuleCall_5_0() { return cEventINTTerminalRuleCall_5_0; }
	}
	public class EVALUABLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mert.recherche.MkDsl.EVALUABLE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEXPRESSIONParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCONNECTIVEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EVALUABLE:
		//    EXPRESSION | CONNECTIVE
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//EXPRESSION | CONNECTIVE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EXPRESSION
		public RuleCall getEXPRESSIONParserRuleCall_0() { return cEXPRESSIONParserRuleCall_0; }
		
		//CONNECTIVE
		public RuleCall getCONNECTIVEParserRuleCall_1() { return cCONNECTIVEParserRuleCall_1; }
	}
	public class EXPRESSIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mert.recherche.MkDsl.EXPRESSION");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftLITERALParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Assignment cOperandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperandOPERANDParserRuleCall_2_0 = (RuleCall)cOperandAssignment_2.eContents().get(0);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightLITERALParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRGhtParenthesSKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EXPRESSION:
		//    "("
		//    left = LITERAL
		//    (operand = OPERAND)?
		//    (right= LITERAL)?
		//    ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"("
		//left = LITERAL
		//(operand = OPERAND)?
		//(right= LITERAL)?
		//")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesSKeyword_0() { return cLeftParenthesSKeyword_0; }
		
		//left = LITERAL
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//LITERAL
		public RuleCall getLeftLITERALParserRuleCall_1_0() { return cLeftLITERALParserRuleCall_1_0; }
		
		//(operand = OPERAND)?
		public Assignment getOperandAssignment_2() { return cOperandAssignment_2; }
		
		//OPERAND
		public RuleCall getOperandOPERANDParserRuleCall_2_0() { return cOperandOPERANDParserRuleCall_2_0; }
		
		//(right= LITERAL)?
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//LITERAL
		public RuleCall getRightLITERALParserRuleCall_3_0() { return cRightLITERALParserRuleCall_3_0; }
		
		//")"
		public Keyword getRGhtParenthesSKeyword_4() { return cRGhtParenthesSKeyword_4; }
	}
	public class CONNECTIVEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mert.recherche.MkDsl.CONNECTIVE");
		private final Assignment cConnectiveAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cConnectiveAlternatives_0 = (Alternatives)cConnectiveAssignment.eContents().get(0);
		private final Keyword cConnectiveANDKeyword_0_0 = (Keyword)cConnectiveAlternatives_0.eContents().get(0);
		private final Keyword cConnectiveORKeyword_0_1 = (Keyword)cConnectiveAlternatives_0.eContents().get(1);
		
		//CONNECTIVE:
		//    connective = ("AND" | "OR")
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//connective = ("AND" | "OR")
		public Assignment getConnectiveAssignment() { return cConnectiveAssignment; }
		
		//("AND" | "OR")
		public Alternatives getConnectiveAlternatives_0() { return cConnectiveAlternatives_0; }
		
		//"AND"
		public Keyword getConnectiveANDKeyword_0_0() { return cConnectiveANDKeyword_0_0; }
		
		//"OR"
		public Keyword getConnectiveORKeyword_0_1() { return cConnectiveORKeyword_0_1; }
	}
	public class VARIABLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mert.recherche.MkDsl.VARIABLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueLITERALParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//VARIABLE: 'var' name = STRING
		//    'value' value = LITERAL
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' name = STRING
		//   'value' value = LITERAL
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name = STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'value'
		public Keyword getValueKeyword_2() { return cValueKeyword_2; }
		
		//value = LITERAL
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//LITERAL
		public RuleCall getValueLITERALParserRuleCall_3_0() { return cValueLITERALParserRuleCall_3_0; }
	}
	public class OPERANDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mert.recherche.MkDsl.OPERAND");
		private final Assignment cOperandAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOperandAlternatives_0 = (Alternatives)cOperandAssignment.eContents().get(0);
		private final Keyword cOperandLessThanSGnKeyword_0_0 = (Keyword)cOperandAlternatives_0.eContents().get(0);
		private final Keyword cOperandLessThanSGnEqualsSGnKeyword_0_1 = (Keyword)cOperandAlternatives_0.eContents().get(1);
		private final Keyword cOperandEqualsSGnEqualsSGnKeyword_0_2 = (Keyword)cOperandAlternatives_0.eContents().get(2);
		private final Keyword cOperandGreaterThanSGnEqualsSGnKeyword_0_3 = (Keyword)cOperandAlternatives_0.eContents().get(3);
		private final Keyword cOperandGreaterThanSGnKeyword_0_4 = (Keyword)cOperandAlternatives_0.eContents().get(4);
		
		//OPERAND:
		//    operand = ("<"|"<="|"=="|">="|">")
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//operand = ("<"|"<="|"=="|">="|">")
		public Assignment getOperandAssignment() { return cOperandAssignment; }
		
		//("<"|"<="|"=="|">="|">")
		public Alternatives getOperandAlternatives_0() { return cOperandAlternatives_0; }
		
		//"<"
		public Keyword getOperandLessThanSGnKeyword_0_0() { return cOperandLessThanSGnKeyword_0_0; }
		
		//"<="
		public Keyword getOperandLessThanSGnEqualsSGnKeyword_0_1() { return cOperandLessThanSGnEqualsSGnKeyword_0_1; }
		
		//"=="
		public Keyword getOperandEqualsSGnEqualsSGnKeyword_0_2() { return cOperandEqualsSGnEqualsSGnKeyword_0_2; }
		
		//">="
		public Keyword getOperandGreaterThanSGnEqualsSGnKeyword_0_3() { return cOperandGreaterThanSGnEqualsSGnKeyword_0_3; }
		
		//">"
		public Keyword getOperandGreaterThanSGnKeyword_0_4() { return cOperandGreaterThanSGnKeyword_0_4; }
	}
	public class LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mert.recherche.MkDsl.LITERAL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LITERAL :
		//     INT | STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	public class COLORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mert.recherche.MkDsl.COLOR");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameBlackKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameRedKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameGreenKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		private final Keyword cNameBlueKeyword_0_3 = (Keyword)cNameAlternatives_0.eContents().get(3);
		private final Keyword cNameOrangeKeyword_0_4 = (Keyword)cNameAlternatives_0.eContents().get(4);
		
		//COLOR:
		//    name = ("black"|"red"|"green"|"blue"|"orange")
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ("black"|"red"|"green"|"blue"|"orange")
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//("black"|"red"|"green"|"blue"|"orange")
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//"black"
		public Keyword getNameBlackKeyword_0_0() { return cNameBlackKeyword_0_0; }
		
		//"red"
		public Keyword getNameRedKeyword_0_1() { return cNameRedKeyword_0_1; }
		
		//"green"
		public Keyword getNameGreenKeyword_0_2() { return cNameGreenKeyword_0_2; }
		
		//"blue"
		public Keyword getNameBlueKeyword_0_3() { return cNameBlueKeyword_0_3; }
		
		//"orange"
		public Keyword getNameOrangeKeyword_0_4() { return cNameOrangeKeyword_0_4; }
	}
	
	
	private final ModelElements pModel;
	private final DeclarationElements pDeclaration;
	private final ESGElements pESG;
	private final VERTEXElements pVERTEX;
	private final EventElements pEvent;
	private final EDGEElements pEDGE;
	private final DTElements pDT;
	private final CONDITIONElements pCONDITION;
	private final RULEElements pRULE;
	private final ACTIONElements pACTION;
	private final EVALUABLEElements pEVALUABLE;
	private final EXPRESSIONElements pEXPRESSION;
	private final CONNECTIVEElements pCONNECTIVE;
	private final VARIABLEElements pVARIABLE;
	private final OPERANDElements pOPERAND;
	private final LITERALElements pLITERAL;
	private final COLORElements pCOLOR;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MkDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDeclaration = new DeclarationElements();
		this.pESG = new ESGElements();
		this.pVERTEX = new VERTEXElements();
		this.pEvent = new EventElements();
		this.pEDGE = new EDGEElements();
		this.pDT = new DTElements();
		this.pCONDITION = new CONDITIONElements();
		this.pRULE = new RULEElements();
		this.pACTION = new ACTIONElements();
		this.pEVALUABLE = new EVALUABLEElements();
		this.pEXPRESSION = new EXPRESSIONElements();
		this.pCONNECTIVE = new CONNECTIVEElements();
		this.pVARIABLE = new VARIABLEElements();
		this.pOPERAND = new OPERANDElements();
		this.pLITERAL = new LITERALElements();
		this.pCOLOR = new COLORElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.mert.recherche.MkDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    declarations+=Declaration*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Declaration:
	//    ESG
	//;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//ESG: 'ESG' name = STRING
	//    ('Event' event = Event)?
	//    subESGs += (VERTEX | ESG) (',' subESGs += (VERTEX | ESG))*
	//    edges += EDGE(',' edges += EDGE)*
	//;
	public ESGElements getESGAccess() {
		return pESG;
	}
	
	public ParserRule getESGRule() {
		return getESGAccess().getRule();
	}
	
	//VERTEX: 'Vertex'
	//    'ID' ID = STRING
	//    'Event' event = Event
	//    ('Color' color= COLOR)?
	//    (dt = DT)?
	//;
	public VERTEXElements getVERTEXAccess() {
		return pVERTEX;
	}
	
	public ParserRule getVERTEXRule() {
		return getVERTEXAccess().getRule();
	}
	
	//Event:
	//    name = STRING
	//;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//EDGE: 'Edge' name = STRING
	//    'Source' source= INT
	//    'Target' target= INT
	//    ('Color' color= COLOR)?
	//;
	public EDGEElements getEDGEAccess() {
		return pEDGE;
	}
	
	public ParserRule getEDGERule() {
		return getEDGEAccess().getRule();
	}
	
	//DT: "DT" name = STRING
	//    "ID" ID = INT
	//    conditions += CONDITION (',' conditions += CONDITION)*
	//    actions += ACTION (',' actions += ACTION)*
	//    rules += RULE (',' rules += RULE)*
	//;
	public DTElements getDTAccess() {
		return pDT;
	}
	
	public ParserRule getDTRule() {
		return getDTAccess().getRule();
	}
	
	//CONDITION: "Condition" name = INT
	//    evals += EVALUABLE(evals += EVALUABLE)*
	//;
	public CONDITIONElements getCONDITIONAccess() {
		return pCONDITION;
	}
	
	public ParserRule getCONDITIONRule() {
		return getCONDITIONAccess().getRule();
	}
	
	//RULE: "Rule" name = STRING
	//    "ID" ID = INT
	//    "value" value = STRING
	//    "variables" vars += VARIABLE("," vars += VARIABLE)*
	//    "actions" actions += [ACTION]("," actions += [ACTION])*
	//;
	public RULEElements getRULEAccess() {
		return pRULE;
	}
	
	public ParserRule getRULERule() {
		return getRULEAccess().getRule();
	}
	
	//ACTION: "Action" name = ID
	//    "ID" ID = STRING
	//    "event" event = INT
	//;
	public ACTIONElements getACTIONAccess() {
		return pACTION;
	}
	
	public ParserRule getACTIONRule() {
		return getACTIONAccess().getRule();
	}
	
	//EVALUABLE:
	//    EXPRESSION | CONNECTIVE
	//;
	public EVALUABLEElements getEVALUABLEAccess() {
		return pEVALUABLE;
	}
	
	public ParserRule getEVALUABLERule() {
		return getEVALUABLEAccess().getRule();
	}
	
	//EXPRESSION:
	//    "("
	//    left = LITERAL
	//    (operand = OPERAND)?
	//    (right= LITERAL)?
	//    ")"
	//;
	public EXPRESSIONElements getEXPRESSIONAccess() {
		return pEXPRESSION;
	}
	
	public ParserRule getEXPRESSIONRule() {
		return getEXPRESSIONAccess().getRule();
	}
	
	//CONNECTIVE:
	//    connective = ("AND" | "OR")
	//;
	public CONNECTIVEElements getCONNECTIVEAccess() {
		return pCONNECTIVE;
	}
	
	public ParserRule getCONNECTIVERule() {
		return getCONNECTIVEAccess().getRule();
	}
	
	//VARIABLE: 'var' name = STRING
	//    'value' value = LITERAL
	//;
	public VARIABLEElements getVARIABLEAccess() {
		return pVARIABLE;
	}
	
	public ParserRule getVARIABLERule() {
		return getVARIABLEAccess().getRule();
	}
	
	//OPERAND:
	//    operand = ("<"|"<="|"=="|">="|">")
	//;
	public OPERANDElements getOPERANDAccess() {
		return pOPERAND;
	}
	
	public ParserRule getOPERANDRule() {
		return getOPERANDAccess().getRule();
	}
	
	//LITERAL :
	//     INT | STRING
	//;
	public LITERALElements getLITERALAccess() {
		return pLITERAL;
	}
	
	public ParserRule getLITERALRule() {
		return getLITERALAccess().getRule();
	}
	
	//COLOR:
	//    name = ("black"|"red"|"green"|"blue"|"orange")
	//;
	public COLORElements getCOLORAccess() {
		return pCOLOR;
	}
	
	public ParserRule getCOLORRule() {
		return getCOLORAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
