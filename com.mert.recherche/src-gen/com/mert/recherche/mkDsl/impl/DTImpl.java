/**
 * generated by Xtext 2.25.0
 */
package com.mert.recherche.mkDsl.impl;

import com.mert.recherche.mkDsl.ACTION;
import com.mert.recherche.mkDsl.CONDITION;
import com.mert.recherche.mkDsl.DT;
import com.mert.recherche.mkDsl.MkDslPackage;
import com.mert.recherche.mkDsl.RULE;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>DT</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.mert.recherche.mkDsl.impl.DTImpl#getName <em>Name</em>}</li>
 *   <li>{@link com.mert.recherche.mkDsl.impl.DTImpl#getID <em>ID</em>}</li>
 *   <li>{@link com.mert.recherche.mkDsl.impl.DTImpl#getConditions <em>Conditions</em>}</li>
 *   <li>{@link com.mert.recherche.mkDsl.impl.DTImpl#getActions <em>Actions</em>}</li>
 *   <li>{@link com.mert.recherche.mkDsl.impl.DTImpl#getRules <em>Rules</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DTImpl extends MinimalEObjectImpl.Container implements DT
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getID() <em>ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getID()
   * @generated
   * @ordered
   */
  protected static final int ID_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getID() <em>ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getID()
   * @generated
   * @ordered
   */
  protected int ýd = ID_EDEFAULT;

  /**
   * The cached value of the '{@link #getConditions() <em>Conditions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditions()
   * @generated
   * @ordered
   */
  protected EList<CONDITION> conditions;

  /**
   * The cached value of the '{@link #getActions() <em>Actions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActions()
   * @generated
   * @ordered
   */
  protected EList<ACTION> actions;

  /**
   * The cached value of the '{@link #getRules() <em>Rules</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRules()
   * @generated
   * @ordered
   */
  protected EList<RULE> rules;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DTImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MkDslPackage.Literals.DT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MkDslPackage.DT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getID()
  {
    return ýd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setID(int newID)
  {
    int oldID = ýd;
    ýd = newID;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MkDslPackage.DT__ID, oldID, ýd));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<CONDITION> getConditions()
  {
    if (conditions == null)
    {
      conditions = new EObjectContainmentEList<CONDITION>(CONDITION.class, this, MkDslPackage.DT__CONDÝTÝONS);
    }
    return conditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ACTION> getActions()
  {
    if (actions == null)
    {
      actions = new EObjectContainmentEList<ACTION>(ACTION.class, this, MkDslPackage.DT__ACTÝONS);
    }
    return actions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<RULE> getRules()
  {
    if (rules == null)
    {
      rules = new EObjectContainmentEList<RULE>(RULE.class, this, MkDslPackage.DT__RULES);
    }
    return rules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MkDslPackage.DT__CONDÝTÝONS:
        return ((InternalEList<?>)getConditions()).basicRemove(otherEnd, msgs);
      case MkDslPackage.DT__ACTÝONS:
        return ((InternalEList<?>)getActions()).basicRemove(otherEnd, msgs);
      case MkDslPackage.DT__RULES:
        return ((InternalEList<?>)getRules()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MkDslPackage.DT__NAME:
        return getName();
      case MkDslPackage.DT__ID:
        return getID();
      case MkDslPackage.DT__CONDÝTÝONS:
        return getConditions();
      case MkDslPackage.DT__ACTÝONS:
        return getActions();
      case MkDslPackage.DT__RULES:
        return getRules();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MkDslPackage.DT__NAME:
        setName((String)newValue);
        return;
      case MkDslPackage.DT__ID:
        setID((Integer)newValue);
        return;
      case MkDslPackage.DT__CONDÝTÝONS:
        getConditions().clear();
        getConditions().addAll((Collection<? extends CONDITION>)newValue);
        return;
      case MkDslPackage.DT__ACTÝONS:
        getActions().clear();
        getActions().addAll((Collection<? extends ACTION>)newValue);
        return;
      case MkDslPackage.DT__RULES:
        getRules().clear();
        getRules().addAll((Collection<? extends RULE>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MkDslPackage.DT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MkDslPackage.DT__ID:
        setID(ID_EDEFAULT);
        return;
      case MkDslPackage.DT__CONDÝTÝONS:
        getConditions().clear();
        return;
      case MkDslPackage.DT__ACTÝONS:
        getActions().clear();
        return;
      case MkDslPackage.DT__RULES:
        getRules().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MkDslPackage.DT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MkDslPackage.DT__ID:
        return ýd != ID_EDEFAULT;
      case MkDslPackage.DT__CONDÝTÝONS:
        return conditions != null && !conditions.isEmpty();
      case MkDslPackage.DT__ACTÝONS:
        return actions != null && !actions.isEmpty();
      case MkDslPackage.DT__RULES:
        return rules != null && !rules.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", ID: ");
    result.append(ýd);
    result.append(')');
    return result.toString();
  }

} //DTImpl
