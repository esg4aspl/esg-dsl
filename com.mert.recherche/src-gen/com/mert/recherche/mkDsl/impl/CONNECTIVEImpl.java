/**
 * generated by Xtext 2.25.0
 */
package com.mert.recherche.mkDsl.impl;

import com.mert.recherche.mkDsl.CONNECTIVE;
import com.mert.recherche.mkDsl.MkDslPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>CONNECTIVE</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.mert.recherche.mkDsl.impl.CONNECTIVEImpl#getConnective <em>Connective</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CONNECTIVEImpl extends EVALUABLEImpl implements CONNECTIVE
{
  /**
   * The default value of the '{@link #getConnective() <em>Connective</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConnective()
   * @generated
   * @ordered
   */
  protected static final String CONNECTÝVE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getConnective() <em>Connective</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConnective()
   * @generated
   * @ordered
   */
  protected String connective = CONNECTÝVE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CONNECTIVEImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MkDslPackage.Literals.CONNECTIVE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getConnective()
  {
    return connective;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConnective(String newConnective)
  {
    String oldConnective = connective;
    connective = newConnective;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MkDslPackage.CONNECTIVE__CONNECTÝVE, oldConnective, connective));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MkDslPackage.CONNECTIVE__CONNECTÝVE:
        return getConnective();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MkDslPackage.CONNECTIVE__CONNECTÝVE:
        setConnective((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MkDslPackage.CONNECTIVE__CONNECTÝVE:
        setConnective(CONNECTÝVE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MkDslPackage.CONNECTIVE__CONNECTÝVE:
        return CONNECTÝVE_EDEFAULT == null ? connective != null : !CONNECTÝVE_EDEFAULT.equals(connective);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (connective: ");
    result.append(connective);
    result.append(')');
    return result.toString();
  }

} //CONNECTIVEImpl
