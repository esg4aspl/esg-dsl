/**
 * generated by Xtext 2.25.0
 */
package com.mert.recherche.mkDsl.impl;

import com.mert.recherche.mkDsl.COLOR;
import com.mert.recherche.mkDsl.DT;
import com.mert.recherche.mkDsl.Event;
import com.mert.recherche.mkDsl.MkDslPackage;
import com.mert.recherche.mkDsl.VERTEX;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>VERTEX</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.mert.recherche.mkDsl.impl.VERTEXImpl#getID <em>ID</em>}</li>
 *   <li>{@link com.mert.recherche.mkDsl.impl.VERTEXImpl#getEvent <em>Event</em>}</li>
 *   <li>{@link com.mert.recherche.mkDsl.impl.VERTEXImpl#getColor <em>Color</em>}</li>
 *   <li>{@link com.mert.recherche.mkDsl.impl.VERTEXImpl#getDt <em>Dt</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VERTEXImpl extends MinimalEObjectImpl.Container implements VERTEX
{
  /**
   * The default value of the '{@link #getID() <em>ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getID()
   * @generated
   * @ordered
   */
  protected static final String ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getID() <em>ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getID()
   * @generated
   * @ordered
   */
  protected String ýd = ID_EDEFAULT;

  /**
   * The cached value of the '{@link #getEvent() <em>Event</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvent()
   * @generated
   * @ordered
   */
  protected Event event;

  /**
   * The cached value of the '{@link #getColor() <em>Color</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColor()
   * @generated
   * @ordered
   */
  protected COLOR color;

  /**
   * The cached value of the '{@link #getDt() <em>Dt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDt()
   * @generated
   * @ordered
   */
  protected DT dt;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VERTEXImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MkDslPackage.Literals.VERTEX;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getID()
  {
    return ýd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setID(String newID)
  {
    String oldID = ýd;
    ýd = newID;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MkDslPackage.VERTEX__ID, oldID, ýd));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Event getEvent()
  {
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEvent(Event newEvent, NotificationChain msgs)
  {
    Event oldEvent = event;
    event = newEvent;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MkDslPackage.VERTEX__EVENT, oldEvent, newEvent);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEvent(Event newEvent)
  {
    if (newEvent != event)
    {
      NotificationChain msgs = null;
      if (event != null)
        msgs = ((InternalEObject)event).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MkDslPackage.VERTEX__EVENT, null, msgs);
      if (newEvent != null)
        msgs = ((InternalEObject)newEvent).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MkDslPackage.VERTEX__EVENT, null, msgs);
      msgs = basicSetEvent(newEvent, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MkDslPackage.VERTEX__EVENT, newEvent, newEvent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public COLOR getColor()
  {
    return color;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetColor(COLOR newColor, NotificationChain msgs)
  {
    COLOR oldColor = color;
    color = newColor;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MkDslPackage.VERTEX__COLOR, oldColor, newColor);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setColor(COLOR newColor)
  {
    if (newColor != color)
    {
      NotificationChain msgs = null;
      if (color != null)
        msgs = ((InternalEObject)color).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MkDslPackage.VERTEX__COLOR, null, msgs);
      if (newColor != null)
        msgs = ((InternalEObject)newColor).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MkDslPackage.VERTEX__COLOR, null, msgs);
      msgs = basicSetColor(newColor, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MkDslPackage.VERTEX__COLOR, newColor, newColor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DT getDt()
  {
    return dt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDt(DT newDt, NotificationChain msgs)
  {
    DT oldDt = dt;
    dt = newDt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MkDslPackage.VERTEX__DT, oldDt, newDt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDt(DT newDt)
  {
    if (newDt != dt)
    {
      NotificationChain msgs = null;
      if (dt != null)
        msgs = ((InternalEObject)dt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MkDslPackage.VERTEX__DT, null, msgs);
      if (newDt != null)
        msgs = ((InternalEObject)newDt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MkDslPackage.VERTEX__DT, null, msgs);
      msgs = basicSetDt(newDt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MkDslPackage.VERTEX__DT, newDt, newDt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MkDslPackage.VERTEX__EVENT:
        return basicSetEvent(null, msgs);
      case MkDslPackage.VERTEX__COLOR:
        return basicSetColor(null, msgs);
      case MkDslPackage.VERTEX__DT:
        return basicSetDt(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MkDslPackage.VERTEX__ID:
        return getID();
      case MkDslPackage.VERTEX__EVENT:
        return getEvent();
      case MkDslPackage.VERTEX__COLOR:
        return getColor();
      case MkDslPackage.VERTEX__DT:
        return getDt();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MkDslPackage.VERTEX__ID:
        setID((String)newValue);
        return;
      case MkDslPackage.VERTEX__EVENT:
        setEvent((Event)newValue);
        return;
      case MkDslPackage.VERTEX__COLOR:
        setColor((COLOR)newValue);
        return;
      case MkDslPackage.VERTEX__DT:
        setDt((DT)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MkDslPackage.VERTEX__ID:
        setID(ID_EDEFAULT);
        return;
      case MkDslPackage.VERTEX__EVENT:
        setEvent((Event)null);
        return;
      case MkDslPackage.VERTEX__COLOR:
        setColor((COLOR)null);
        return;
      case MkDslPackage.VERTEX__DT:
        setDt((DT)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MkDslPackage.VERTEX__ID:
        return ID_EDEFAULT == null ? ýd != null : !ID_EDEFAULT.equals(ýd);
      case MkDslPackage.VERTEX__EVENT:
        return event != null;
      case MkDslPackage.VERTEX__COLOR:
        return color != null;
      case MkDslPackage.VERTEX__DT:
        return dt != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (ID: ");
    result.append(ýd);
    result.append(')');
    return result.toString();
  }

} //VERTEXImpl
