/**
 * generated by Xtext 2.25.0
 */
package com.mert.recherche.mkDsl.impl;

import com.mert.recherche.mkDsl.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MkDslFactoryImpl extends EFactoryImpl implements MkDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MkDslFactory init()
  {
    try
    {
      MkDslFactory theMkDslFactory = (MkDslFactory)EPackage.Registry.INSTANCE.getEFactory(MkDslPackage.eNS_URI);
      if (theMkDslFactory != null)
      {
        return theMkDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MkDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MkDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MkDslPackage.MODEL: return createModel();
      case MkDslPackage.DECLARATÝON: return createDeclaration();
      case MkDslPackage.ESG: return createESG();
      case MkDslPackage.VERTEX: return createVERTEX();
      case MkDslPackage.EVENT: return createEvent();
      case MkDslPackage.EDGE: return createEDGE();
      case MkDslPackage.DT: return createDT();
      case MkDslPackage.CONDITION: return createCONDITION();
      case MkDslPackage.RULE: return createRULE();
      case MkDslPackage.ACTION: return createACTION();
      case MkDslPackage.EVALUABLE: return createEVALUABLE();
      case MkDslPackage.EXPRESSION: return createEXPRESSION();
      case MkDslPackage.CONNECTIVE: return createCONNECTIVE();
      case MkDslPackage.VARIABLE: return createVARIABLE();
      case MkDslPackage.OPERAND: return createOPERAND();
      case MkDslPackage.COLOR: return createCOLOR();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Declaration createDeclaration()
  {
    DeclarationImpl declaration = new DeclarationImpl();
    return declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ESG createESG()
  {
    ESGImpl esg = new ESGImpl();
    return esg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VERTEX createVERTEX()
  {
    VERTEXImpl vertex = new VERTEXImpl();
    return vertex;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Event createEvent()
  {
    EventImpl event = new EventImpl();
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EDGE createEDGE()
  {
    EDGEImpl edge = new EDGEImpl();
    return edge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DT createDT()
  {
    DTImpl dt = new DTImpl();
    return dt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CONDITION createCONDITION()
  {
    CONDITIONImpl condýtýon = new CONDITIONImpl();
    return condýtýon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RULE createRULE()
  {
    RULEImpl rule = new RULEImpl();
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ACTION createACTION()
  {
    ACTIONImpl actýon = new ACTIONImpl();
    return actýon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EVALUABLE createEVALUABLE()
  {
    EVALUABLEImpl evaluable = new EVALUABLEImpl();
    return evaluable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EXPRESSION createEXPRESSION()
  {
    EXPRESSIONImpl expressýon = new EXPRESSIONImpl();
    return expressýon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CONNECTIVE createCONNECTIVE()
  {
    CONNECTIVEImpl connectýve = new CONNECTIVEImpl();
    return connectýve;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VARIABLE createVARIABLE()
  {
    VARIABLEImpl varýable = new VARIABLEImpl();
    return varýable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OPERAND createOPERAND()
  {
    OPERANDImpl operand = new OPERANDImpl();
    return operand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public COLOR createCOLOR()
  {
    COLORImpl color = new COLORImpl();
    return color;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MkDslPackage getMkDslPackage()
  {
    return (MkDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MkDslPackage getPackage()
  {
    return MkDslPackage.eINSTANCE;
  }

} //MkDslFactoryImpl
