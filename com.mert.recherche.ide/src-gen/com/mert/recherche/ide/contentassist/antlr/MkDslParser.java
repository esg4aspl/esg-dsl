/*
 * generated by Xtext 2.25.0
 */
package com.mert.recherche.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.mert.recherche.ide.contentassist.antlr.internal.InternalMkDslParser;
import com.mert.recherche.services.MkDslGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MkDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MkDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MkDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getESGAccess().getSubESGsAlternatives_3_0(), "rule__ESG__SubESGsAlternatives_3_0");
			builder.put(grammarAccess.getESGAccess().getSubESGsAlternatives_4_1_0(), "rule__ESG__SubESGsAlternatives_4_1_0");
			builder.put(grammarAccess.getEVALUABLEAccess().getAlternatives(), "rule__EVALUABLE__Alternatives");
			builder.put(grammarAccess.getCONNECTIVEAccess().getConnectiveAlternatives_0(), "rule__CONNECTIVE__ConnectiveAlternatives_0");
			builder.put(grammarAccess.getOPERANDAccess().getOperandAlternatives_0(), "rule__OPERAND__OperandAlternatives_0");
			builder.put(grammarAccess.getLITERALAccess().getAlternatives(), "rule__LITERAL__Alternatives");
			builder.put(grammarAccess.getCOLORAccess().getNameAlternatives_0(), "rule__COLOR__NameAlternatives_0");
			builder.put(grammarAccess.getESGAccess().getGroup(), "rule__ESG__Group__0");
			builder.put(grammarAccess.getESGAccess().getGroup_2(), "rule__ESG__Group_2__0");
			builder.put(grammarAccess.getESGAccess().getGroup_4(), "rule__ESG__Group_4__0");
			builder.put(grammarAccess.getESGAccess().getGroup_6(), "rule__ESG__Group_6__0");
			builder.put(grammarAccess.getVERTEXAccess().getGroup(), "rule__VERTEX__Group__0");
			builder.put(grammarAccess.getVERTEXAccess().getGroup_5(), "rule__VERTEX__Group_5__0");
			builder.put(grammarAccess.getEDGEAccess().getGroup(), "rule__EDGE__Group__0");
			builder.put(grammarAccess.getEDGEAccess().getGroup_6(), "rule__EDGE__Group_6__0");
			builder.put(grammarAccess.getDTAccess().getGroup(), "rule__DT__Group__0");
			builder.put(grammarAccess.getDTAccess().getGroup_5(), "rule__DT__Group_5__0");
			builder.put(grammarAccess.getDTAccess().getGroup_7(), "rule__DT__Group_7__0");
			builder.put(grammarAccess.getDTAccess().getGroup_9(), "rule__DT__Group_9__0");
			builder.put(grammarAccess.getCONDITIONAccess().getGroup(), "rule__CONDITION__Group__0");
			builder.put(grammarAccess.getRULEAccess().getGroup(), "rule__RULE__Group__0");
			builder.put(grammarAccess.getRULEAccess().getGroup_8(), "rule__RULE__Group_8__0");
			builder.put(grammarAccess.getRULEAccess().getGroup_11(), "rule__RULE__Group_11__0");
			builder.put(grammarAccess.getACTIONAccess().getGroup(), "rule__ACTION__Group__0");
			builder.put(grammarAccess.getEXPRESSIONAccess().getGroup(), "rule__EXPRESSION__Group__0");
			builder.put(grammarAccess.getVARIABLEAccess().getGroup(), "rule__VARIABLE__Group__0");
			builder.put(grammarAccess.getModelAccess().getDeclarationsAssignment(), "rule__Model__DeclarationsAssignment");
			builder.put(grammarAccess.getESGAccess().getNameAssignment_1(), "rule__ESG__NameAssignment_1");
			builder.put(grammarAccess.getESGAccess().getEventAssignment_2_1(), "rule__ESG__EventAssignment_2_1");
			builder.put(grammarAccess.getESGAccess().getSubESGsAssignment_3(), "rule__ESG__SubESGsAssignment_3");
			builder.put(grammarAccess.getESGAccess().getSubESGsAssignment_4_1(), "rule__ESG__SubESGsAssignment_4_1");
			builder.put(grammarAccess.getESGAccess().getEdgesAssignment_5(), "rule__ESG__EdgesAssignment_5");
			builder.put(grammarAccess.getESGAccess().getEdgesAssignment_6_1(), "rule__ESG__EdgesAssignment_6_1");
			builder.put(grammarAccess.getVERTEXAccess().getIDAssignment_2(), "rule__VERTEX__IDAssignment_2");
			builder.put(grammarAccess.getVERTEXAccess().getEventAssignment_4(), "rule__VERTEX__EventAssignment_4");
			builder.put(grammarAccess.getVERTEXAccess().getColorAssignment_5_1(), "rule__VERTEX__ColorAssignment_5_1");
			builder.put(grammarAccess.getVERTEXAccess().getDtAssignment_6(), "rule__VERTEX__DtAssignment_6");
			builder.put(grammarAccess.getEventAccess().getNameAssignment(), "rule__Event__NameAssignment");
			builder.put(grammarAccess.getEDGEAccess().getNameAssignment_1(), "rule__EDGE__NameAssignment_1");
			builder.put(grammarAccess.getEDGEAccess().getSourceAssignment_3(), "rule__EDGE__SourceAssignment_3");
			builder.put(grammarAccess.getEDGEAccess().getTargetAssignment_5(), "rule__EDGE__TargetAssignment_5");
			builder.put(grammarAccess.getEDGEAccess().getColorAssignment_6_1(), "rule__EDGE__ColorAssignment_6_1");
			builder.put(grammarAccess.getDTAccess().getNameAssignment_1(), "rule__DT__NameAssignment_1");
			builder.put(grammarAccess.getDTAccess().getIDAssignment_3(), "rule__DT__IDAssignment_3");
			builder.put(grammarAccess.getDTAccess().getConditionsAssignment_4(), "rule__DT__ConditionsAssignment_4");
			builder.put(grammarAccess.getDTAccess().getConditionsAssignment_5_1(), "rule__DT__ConditionsAssignment_5_1");
			builder.put(grammarAccess.getDTAccess().getActionsAssignment_6(), "rule__DT__ActionsAssignment_6");
			builder.put(grammarAccess.getDTAccess().getActionsAssignment_7_1(), "rule__DT__ActionsAssignment_7_1");
			builder.put(grammarAccess.getDTAccess().getRulesAssignment_8(), "rule__DT__RulesAssignment_8");
			builder.put(grammarAccess.getDTAccess().getRulesAssignment_9_1(), "rule__DT__RulesAssignment_9_1");
			builder.put(grammarAccess.getCONDITIONAccess().getNameAssignment_1(), "rule__CONDITION__NameAssignment_1");
			builder.put(grammarAccess.getCONDITIONAccess().getEvalsAssignment_2(), "rule__CONDITION__EvalsAssignment_2");
			builder.put(grammarAccess.getCONDITIONAccess().getEvalsAssignment_3(), "rule__CONDITION__EvalsAssignment_3");
			builder.put(grammarAccess.getRULEAccess().getNameAssignment_1(), "rule__RULE__NameAssignment_1");
			builder.put(grammarAccess.getRULEAccess().getIDAssignment_3(), "rule__RULE__IDAssignment_3");
			builder.put(grammarAccess.getRULEAccess().getValueAssignment_5(), "rule__RULE__ValueAssignment_5");
			builder.put(grammarAccess.getRULEAccess().getVarsAssignment_7(), "rule__RULE__VarsAssignment_7");
			builder.put(grammarAccess.getRULEAccess().getVarsAssignment_8_1(), "rule__RULE__VarsAssignment_8_1");
			builder.put(grammarAccess.getRULEAccess().getActionsAssignment_10(), "rule__RULE__ActionsAssignment_10");
			builder.put(grammarAccess.getRULEAccess().getActionsAssignment_11_1(), "rule__RULE__ActionsAssignment_11_1");
			builder.put(grammarAccess.getACTIONAccess().getNameAssignment_1(), "rule__ACTION__NameAssignment_1");
			builder.put(grammarAccess.getACTIONAccess().getIDAssignment_3(), "rule__ACTION__IDAssignment_3");
			builder.put(grammarAccess.getACTIONAccess().getEventAssignment_5(), "rule__ACTION__EventAssignment_5");
			builder.put(grammarAccess.getEXPRESSIONAccess().getLeftAssignment_1(), "rule__EXPRESSION__LeftAssignment_1");
			builder.put(grammarAccess.getEXPRESSIONAccess().getOperandAssignment_2(), "rule__EXPRESSION__OperandAssignment_2");
			builder.put(grammarAccess.getEXPRESSIONAccess().getRightAssignment_3(), "rule__EXPRESSION__RightAssignment_3");
			builder.put(grammarAccess.getCONNECTIVEAccess().getConnectiveAssignment(), "rule__CONNECTIVE__ConnectiveAssignment");
			builder.put(grammarAccess.getVARIABLEAccess().getNameAssignment_1(), "rule__VARIABLE__NameAssignment_1");
			builder.put(grammarAccess.getVARIABLEAccess().getValueAssignment_3(), "rule__VARIABLE__ValueAssignment_3");
			builder.put(grammarAccess.getOPERANDAccess().getOperandAssignment(), "rule__OPERAND__OperandAssignment");
			builder.put(grammarAccess.getCOLORAccess().getNameAssignment(), "rule__COLOR__NameAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MkDslGrammarAccess grammarAccess;

	@Override
	protected InternalMkDslParser createParser() {
		InternalMkDslParser result = new InternalMkDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MkDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MkDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
